ap.avionics power.value = (A:CIRCUIT AVIONICS ON,Bool)
ap.speed.mode select = (L:XMLVAR_AirSpeedIsInMach,Bool)
ap.speed.primary.active = True
ap.speed.primary.value = (A:AUTOPILOT AIRSPEED HOLD VAR, knots)
ap.speed.primary.type = IAS
ap.speed.primary.set value = False
ap.speed.primary.unpressed scale = 1.0
ap.speed.primary.pressed scale = 1.0
ap.speed.primary.push action = 1 (>L:XMLVAR_AirSpeedIsInMach)
ap.speed.alternate.active = True
ap.speed.alternate.value = (A:AUTOPILOT MACH HOLD VAR, number)
ap.speed.alternate.type = Mach
ap.speed.alternate.set value = (L:GCVAL) (>K:AP_MACH_VAR_SET)
ap.speed.alternate.unpressed scale = 0.01
ap.speed.alternate.pressed scale = 0.01
ap.speed.alternate.push action = 0 (>L:XMLVAR_AirSpeedIsInMach)
ap.heading.mode select = False
ap.heading.primary.active = True
ap.heading.primary.value = (A:AUTOPILOT HEADING LOCK DIR,degrees)
ap.heading.primary.type = Track
ap.heading.primary.set value = (L:GCVAL) (>K:HEADING_BUG_SET)
ap.heading.primary.unpressed scale = 1.0
ap.heading.primary.pressed scale = 10.0
ap.heading.primary.push action = False
ap.heading.alternate.active = False
ap.heading.alternate.value = False
ap.heading.alternate.type = Blank
ap.heading.alternate.set value = False
ap.heading.alternate.unpressed scale = False
ap.heading.alternate.pressed scale = False
ap.heading.alternate.push action = False
ap.vs.mode select = False
ap.vs.primary.active = (A:AUTOPILOT VERTICAL HOLD,bool)
ap.vs.primary.value = (A:AUTOPILOT VERTICAL HOLD VAR,feet/minute)
ap.vs.primary.type = VS
ap.vs.primary.set value = (L:GCVAL) (>K:AP_VS_VAR_SET_ENGLISH)
ap.vs.primary.unpressed scale = 100.0
ap.vs.primary.pressed scale = 100.0
ap.vs.primary.push action = False
ap.vs.alternate.active = False
ap.vs.alternate.value = False
ap.vs.alternate.type = Blank
ap.vs.alternate.set value = False
ap.vs.alternate.unpressed scale = False
ap.vs.alternate.pressed scale = False
ap.vs.alternate.push action = False
ap.altitude.mode select = False
ap.altitude.primary.active = True
ap.altitude.primary.value = (A:AUTOPILOT ALTITUDE LOCK VAR, feet)
ap.altitude.primary.type = Altitude
ap.altitude.primary.set value = (L:GCVAL) (>K:AP_ALT_VAR_SET_ENGLISH)
ap.altitude.primary.unpressed scale = 100.0
ap.altitude.primary.pressed scale = 1000.0
ap.altitude.primary.push action = False
ap.altitude.alternate.active = False
ap.altitude.alternate.value = False
ap.altitude.alternate.type = Blank
ap.altitude.alternate.set value = False
ap.altitude.alternate.unpressed scale = False
ap.altitude.alternate.pressed scale = False
ap.altitude.alternate.push action = False
ap.autothrottle.led = False
ap.autothrottle.push action = False
ap.speed hold.led = False
ap.speed hold.push action = False
ap.lnav.led = (A:AUTOPILOT NAV1 LOCK,bool)
ap.lnav.push action = (>K:AP_NAV1_HOLD)
ap.vnav.led = (L:XMLVAR_VNAVButtonValue)
ap.vnav.push action = (L:XMLVAR_VNAVButtonValue) ! (>L:XMLVAR_VNAVButtonValue)
ap.flch.led = (A:AUTOPILOT FLIGHT LEVEL CHANGE, bool)
ap.flch.push action = (>K:FLIGHT_LEVEL_CHANGE) (A:AIRSPEED INDICATED, knots) (>K:AP_SPD_VAR_SET)
ap.heading hold.led = (A:AUTOPILOT HEADING LOCK,bool)
ap.heading hold.push action = (>K:AP_HDG_HOLD)
ap.vs hold.led = (A:AUTOPILOT VERTICAL HOLD,bool)
ap.vs hold.push action = (>K:AP_PANEL_VS_HOLD)
ap.alt hold.led = (A:AUTOPILOT ATTITUDE HOLD,bool)
ap.alt hold.push action = (>K:AP_ALT_HOLD)
ap.autopilot.led = (A:AUTOPILOT MASTER,bool)
ap.autopilot.push action = (A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AP_MASTER) }
ap.yd.led = (A:AUTOPILOT YAW DAMPER,bool)
ap.yd.push action = (>K:YAW_DAMPER_TOGGLE)
ap.approach.led = (A:AUTOPILOT APPROACH HOLD, Bool) (A:AUTOPILOT GLIDESLOPE HOLD, Bool) and
ap.approach.push action = (A:AUTOPILOT APPROACH HOLD, Bool) (A:AUTOPILOT GLIDESLOPE HOLD, Bool) ! and if{ (>K:AP_APR_HOLD) } (>K:AP_APR_HOLD)
ap.deice airframe.on action = (A:STRUCTURAL DEICE SWITCH, Bool) ! if{ (>K:TOGGLE_STRUCTURAL_DEICE) }
ap.deice airframe.off action = (A:STRUCTURAL DEICE SWITCH, Bool) if{ (>K:TOGGLE_STRUCTURAL_DEICE) }
ap.ice light.on action = (>K:TBM930_ICE_LIGHT_ON)
ap.ice light.off action = (>K:TBM930_ICE_LIGHT_OFF)
ap.deice prop.on action = (A:PROP DEICE SWITCH:1, Bool) ! if{ 1 (>K:1:TOGGLE_PROPELLER_DEICE) }
ap.deice prop.off action = (A:PROP DEICE SWITCH:1, Bool) if{ 1 (>K:1:TOGGLE_PROPELLER_DEICE) }
ap.deice windshield.on action = (A:WINDSHIELD DEICE SWITCH, Bool) ! if{ (>K:WINDSHIELD_DEICE_TOGGLE) }
ap.deice windshield.off action = (A:WINDSHIELD DEICE SWITCH, Bool) if{ (>K:WINDSHIELD_DEICE_TOGGLE) }
ap.pitot left.on action = 1 (>L:XMLVAR_Pitot_1) (A:PITOT HEAT, bool) ! if{ (>K:PITOT_HEAT_TOGGLE) }
ap.pitot left.off action = 0 (>L:XMLVAR_Pitot_1) (L:XMLVAR_Pitot_1) ! (L:XMLVAR_Pitot_2) ! and (A:PITOT HEAT, bool) == if{ (>K:PITOT_HEAT_TOGGLE) }
ap.pitot right.on action = 1 (>L:XMLVAR_Pitot_2) (A:PITOT HEAT, bool) ! if{ (>K:PITOT_HEAT_TOGGLE) }
ap.pitot right.off action = 0 (>L:XMLVAR_Pitot_2) (L:XMLVAR_Pitot_1) ! (L:XMLVAR_Pitot_2) ! and (A:PITOT HEAT, bool) == if{ (>K:PITOT_HEAT_TOGGLE) }
ap.inertial separator.on action = (A:ENG_ANTI_ICE:1,Bool) ! if{ (>K:ANTI_ICE_TOGGLE_ENG1) }
ap.inertial separator.off action = (A:ENG_ANTI_ICE:1,Bool) if{ (>K:ANTI_ICE_TOGGLE_ENG1) }
ap.fuel select.on action = False
ap.fuel select.off action = False
ap.spare 1.on action = False
ap.spare 1.off action = False
ap.spare 2.on action = False
ap.spare 2.off action = False
ap.bleed.top action = 0 (>K:BLEED_AIR_SOURCE_CONTROL_SET)
ap.bleed.middle action = 3 (>K:BLEED_AIR_SOURCE_CONTROL_SET)
ap.bleed.bottom action = 1 (>K:BLEED_AIR_SOURCE_CONTROL_SET)
ap.starter.top action = 0 (>L:XMLVAR_Starter, Number) (A:GENERAL ENG STARTER:1, Bool) ! if{ (>K:TOGGLE_STARTER1) }
ap.starter.middle action = False
ap.starter.bottom action = 2 (>L:XMLVAR_Starter, Number) (A:GENERAL ENG STARTER:1, Bool) if{ (>K:TOGGLE_STARTER1) }
ap.ignition.top action = 1 (>A:TURB ENG IGNITION SWITCH EX1:1, Enum) 1 (>L:XMLVAR_Ignition)
ap.ignition.middle action = 2 (>A:TURB ENG IGNITION SWITCH EX1:1, Enum) 0 (>L:XMLVAR_Ignition)
ap.ignition.bottom action = 0 (>A:TURB ENG IGNITION SWITCH EX1:1, Enum) 0 (>L:XMLVAR_Ignition)
ap.fuel pump.top action = 2 (>L:XMLVAR_BoostFuelPump, Number) (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) 2 != if{ 2 (>K:ELECT_FUEL_PUMP1_SET) }
ap.fuel pump.middle action = 1 (>L:XMLVAR_BoostFuelPump, Number) (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) 1 != if{ 1 (>K:ELECT_FUEL_PUMP1_SET) }
ap.fuel pump.bottom action = 0 (>L:XMLVAR_BoostFuelPump, Number) (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) 0 != if{ 0 (>K:ELECT_FUEL_PUMP1_SET) }
ap.autopilot master.top action = 0 (>L:XMLVAR_APTrim) (A:AUTOPILOT DISENGAGED, Bool) if{ (>K:AUTOPILOT_DISENGAGE_TOGGLE) }
ap.autopilot master.middle action = 1 (>L:XMLVAR_APTrim) (A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AUTOPILOT_DISENGAGE_TOGGLE) } (A:RUDDER TRIM DISABLED, Bool) if{ 0 (>K:RUDDER_TRIM_DISABLED_SET) } (A:AILERON TRIM DISABLED, Bool) if{ 0 (>K:AILERON_TRIM_DISABLED_SET) }
ap.autopilot master.bottom action = 2 (>L:XMLVAR_APTrim) (A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AUTOPILOT_DISENGAGE_TOGGLE) } (A:RUDDER TRIM DISABLED, Bool) ! if{ 1 (>K:RUDDER_TRIM_DISABLED_SET) } (A:AILERON TRIM DISABLED, Bool) ! if{ 1 (>K:AILERON_TRIM_DISABLED_SET) }
